const jwt = require("jsonwebtoken");
const passport = require("passport");
const bcrypt = require("bcryptjs");
const User = require("../models/user.model");

// H√†m t·∫°o Access Token & Refresh Token
const generateTokens = (user) => {
    const accessToken = jwt.sign(
        { userId: user._id, phoneNumber: user.phoneNumber },
        process.env.JWT_SECRET,
        { expiresIn: "10s" }
    );

    const refreshToken = jwt.sign(
        { userId: user._id },
        process.env.REFRESH_SECRET,
        { expiresIn: "10s" }
    );

    return { accessToken, refreshToken };
};

exports.login = async (req, res) => {
  try {
      const { phoneNumber, password } = req.body;
      
      console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", { phoneNumber, password });

      if (!phoneNumber || !password) {
          return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u!" });
      }

      const user = await User.findOne({ phoneNumber });

      if (!user) {
          return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i ch∆∞a ƒëƒÉng k√Ω!" });
      }

      console.log("D·ªØ li·ªáu ng∆∞·ªùi d√πng trong DB:", user);

      // Ki·ªÉm tra m·∫≠t kh·∫©u ƒë√£ hash ch∆∞a
      if (!user.password) {
          return res.status(500).json({ message: "M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒë∆∞·ª£c m√£ h√≥a!" });
      }

      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
          return res.status(400).json({ message: "M·∫≠t kh·∫©u sai!" });
      }

      // T·∫°o token m·ªõi
      const { accessToken, refreshToken } = generateTokens(user);
      await User.updateOne({ _id: user._id }, { refreshToken });


      // L∆∞u refreshToken v√†o cookie
      res.cookie("refreshToken", refreshToken, {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",    
          sameSite: "strict"
      });

      res.json({ accessToken, refreshToken });

  } catch (error) {
      console.error("L·ªói server:", error);
      res.status(500).json({ message: "L·ªói server!" });
  }
};


exports.refreshToken = async (req, res) => {
    try {
        console.log("üõ† Cookies nh·∫≠n ƒë∆∞·ª£c:", req.cookies);

        const oldRefreshToken = req.cookies.refreshToken;
        if (!oldRefreshToken) {
            return res.status(401).json({ message: "Kh√¥ng c√≥ Refresh Token!" });
        }

        console.log("üîç Received JWT:", oldRefreshToken);

        // X√°c minh Refresh Token
        let decoded;
        try {
            decoded = jwt.verify(oldRefreshToken, process.env.REFRESH_SECRET);
        } catch (err) {
            console.error("‚ùå L·ªói x√°c minh token:", err);
            return res.status(403).json({ message: "Refresh Token kh√¥ng h·ª£p l·ªá!" });
        }

        console.log("‚úÖ Refresh Token h·ª£p l·ªá:", decoded);

        const user = await User.findById(decoded.userId);
        if (!user) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y user!");
            return res.status(403).json({ message: "Refresh Token kh√¥ng h·ª£p l·ªá!" });
        }

        if (user.refreshToken !== oldRefreshToken) {
            console.log("‚ùå Refresh Token kh√¥ng kh·ªõp v·ªõi DB!");
            return res.status(403).json({ message: "Refresh Token kh√¥ng h·ª£p l·ªá!" });
        }

        // T·∫°o Access Token m·ªõi
        const newAccessToken = jwt.sign(
            { userId: user._id, phoneNumber: user.phoneNumber },
            process.env.JWT_SECRET,
            { expiresIn: "10s" }
        );

        // üîÑ **C·∫•p Refresh Token m·ªõi** (kh√¥ng d√πng l·∫°i token c≈©)
        const newRefreshToken = jwt.sign(
            { userId: user._id },
            process.env.REFRESH_SECRET,
            { expiresIn: "10s" }
        );

        // üìù **C·∫≠p nh·∫≠t refreshToken trong database**
        await User.updateOne({ _id: user._id }, { refreshToken: newRefreshToken });

        console.log("üéâ C·∫•p Access Token m·ªõi:", newAccessToken);
        console.log("üîÑ C·∫•p Refresh Token m·ªõi:", newRefreshToken);

        // ‚úÖ **G·ª≠i l·∫°i Refresh Token m·ªõi qua cookie**
        res.cookie("refreshToken", newRefreshToken, {
            httpOnly: true,
            secure: process.env.NODE_ENV === "production",
            sameSite: "Lax"
        });

        res.json({ accessToken: newAccessToken, refreshToken: newRefreshToken });

    } catch (error) {
        console.error("üî• L·ªói server:", error);
        return res.status(500).json({ message: "L·ªói server!" });
    }
};



// üîπ [POST] ƒêƒÉng xu·∫•t
exports.logout = async (req, res) => {
    try {
        const { refreshToken } = req.cookies;
        if (!refreshToken) return res.status(400).json({ message: "Kh√¥ng c√≥ Refresh Token!" });

        // T√¨m user & x√≥a refreshToken
        await User.updateOne({ refreshToken }, { $unset: { refreshToken: "" } });

        // X√≥a cookie
        res.clearCookie("refreshToken");
        res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!" });
    }
};

// üîπ [GET] X·ª≠ l√Ω ƒëƒÉng nh·∫≠p Google OAuth
exports.googleAuth = passport.authenticate("google", {
    scope: ["profile", "email"],
    prompt: "consent",
    accessType: "offline"
});

// üîπ [GET] X·ª≠ l√Ω callback t·ª´ Google OAuth
exports.googleCallback = (req, res, next) => {
    passport.authenticate("google", { session: false }, async (err, user) => {
        if (err || !user) {
            return res.redirect("/login?error=google_auth_failed");
        }

        const { accessToken, refreshToken } = generateTokens(user);

        // L∆∞u Refresh Token v√†o HttpOnly Cookie
        res.cookie("refreshToken", refreshToken, {
            httpOnly: true,
            secure: true,
            sameSite: "Strict"
        });

        res.redirect(`http://localhost:5713?token=${accessToken}`);
    })(req, res, next);
};
