const User = require('../models/user.model');
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
require("dotenv").config();

// SECRET KEY d√πng ƒë·ªÉ k√Ω JWT
const JWT_SECRET = process.env.JWT_SECRET;


exports.registerUser = async (req, res) => {
    try {
        const { phoneNumber, name, password } = req.body;

        const existingUser = await User.findOne({ phoneNumber });
        if (existingUser) {
            return res.status(400).json({ error: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
        }

        // Hash m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o database
        const hashedPassword = await bcrypt.hash(password, 10);

        const newUser = await User.create({
            phoneNumber,
            name,
            password: hashedPassword, // L∆∞u m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a
            role: "user", // M·∫∑c ƒë·ªãnh role l√† user
        });

        res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng", userId: newUser._id });
    } catch (error) {
        console.error("L·ªói khi ƒëƒÉng k√Ω user:", error);
        res.status(500).json({ error: "L·ªói khi ƒëƒÉng k√Ω user" });
    }
};


// üîµ [GET] L·∫•y danh s√°ch user
exports.getUsers = async (req, res) => {
    try {
        const roleFilter = req.query.role ? { role: req.query.role } : {};
        const users = await User.find(roleFilter).select("-__v");
        res.json(users);
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch user:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch user" });
    }
};

// üü° [GET] L·∫•y user theo ID
exports.getUserById = async (req, res) => {
    try {
        const user = await User.findById(req.params.id).select("-__v");
        if (!user) return res.status(404).json({ error: "User kh√¥ng t·ªìn t·∫°i" });
        res.json(user);
    } catch (error) {
        console.error("L·ªói khi l·∫•y user:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y user" });
    }
};

// üü† [PUT] C·∫≠p nh·∫≠t user
exports.updateUser = async (req, res) => {
    try {
        const { name, email, phone, role } = req.body;

        // Ki·ªÉm tra user t·ªìn t·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        const userExists = await User.exists({ _id: req.params.id });
        if (!userExists) return res.status(404).json({ error: "User kh√¥ng t·ªìn t·∫°i" });

        // N·∫øu kh√¥ng ph·∫£i admin, kh√¥ng ƒë∆∞·ª£c thay ƒë·ªïi role
        const updateData = { name, email, phone };
        if (req.user?.role === 'admin') {
            updateData.role = role;
        }

        const updatedUser = await User.findByIdAndUpdate(
            req.params.id,
            updateData,
            { new: true, runValidators: true }
        );

        res.json(updatedUser);
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t user:", error);
        res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t user" });
    }
};

// üî¥ [DELETE] X√≥a user
exports.deleteUser = async (req, res) => {
    try {
        // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c x√≥a user
        if (req.user?.role !== 'admin') {
            return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a user" });
        }

        const userExists = await User.exists({ _id: req.params.id });
        if (!userExists) return res.status(404).json({ error: "User kh√¥ng t·ªìn t·∫°i" });

        await User.findByIdAndDelete(req.params.id);
        res.json({ message: "User ƒë√£ b·ªã x√≥a" });
    } catch (error) {
        console.error("L·ªói khi x√≥a user:", error);
        res.status(500).json({ error: "L·ªói khi x√≥a user" });
    }
};
